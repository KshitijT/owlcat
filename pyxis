#!/usr/bin/python
# -*- coding: utf-8 -*-

#
#% $Id$ 
#
#
# Copyright (C) 2002-2011
# The MeqTree Foundation & 
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>,
# or write to the Free Software Foundation, Inc., 
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
import sys
import os.path
import re
import time
import subprocess
import imp
import traceback
import shutil

# defer config until later
PYXIS_LOAD_CONFIG = False
# disable auto-import -- meant for interactive sessions only
PYXIS_AUTO_IMPORT_MODULES = False

def report_elapsed (ts0):
  ts0 = time.time() - ts0;
  h = ts0//3600;
  m = (ts0-h*3600)//60;
  s = ts0%60;     
  info("Elapsed time is %dh%dm%.2fs"%(h,m,s));

if __name__ == "__main__":

  # setup some standard command-line option parsing
  #
  from optparse import OptionParser
  parser = OptionParser(usage="""%prog: [options] a=value command_x b=value c=value command_y ...""",
    description="Runs a sequence of reduction commands");
  parser.add_option("-v","--verbose",type="int",default=None,metavar="LEVEL",
                    help="verbosity level, default is 1. Equivalent to VERBOSE=LEVEL");
  parser.add_option("-q","--quiet",action="store_true",
                    help="quiet mode: non-critical internal messages are not sent to console "+
                    "when logging to file. Implies --verbose 0 unless explicitly set.");
  parser.add_option("-n","--no-log",action="store_true",
                    help="disable logging: ignore assignments to LOG and send all output to console.\n"
                    "Equivalent to LOG_DISABLE=True.");
  parser.add_option("--log",type="string",metavar="FILENAME",
                    help="log output to file. Equivalent to LOG=FILENAME.");
  parser.add_option("-l","--default-log",dest="default_log",action="store_true",
                    help="log output to default log file default.log");
  parser.add_option("-f","--flush-log",dest="flush_log",action="store_true",
                    help="flush old logfiles. Default is to append to existing logs.\n"
                    "Equivalent to LOG_FLUSH=True.");
  parser.add_option("-j","--jobs",type="int",metavar="N",default=1,
                    help="run up to N jobs in parallel. Equivalent to JOBS=N.");
  parser.add_option("-p","--persist",action="store_true",
                    help="Persist with per-lists as far as possible on error. Equivalent to PERSIST=1.");
  parser.add_option("-o","--outdir",type="string",metavar="DIR",
                    help="direct outputs to subdirectory. Equivalent to OUTDIR=DIR.");
  parser.add_option("-x","--no-x11",action="store_true",
                    help="explicitly disable X11 connections. Equivalent to NO_X11=True.\n"
                    "HIGHLY RECOMMENDED for offline jobs, as some tools (e.g. matplolib) like\n"
                    "to open needless X11 connections, then crash if the X server becomes\n"
                    "unavailable. This is the default when running under a 'screen' session.");
  parser.add_option("-X","--x11",action="store_true",
                    help="do not disable X11 connections when running under a 'screen' session.");
                    

  (options,args) = parser.parse_args();

  # set up variables from options before import
  if options.outdir:
    OUTDIR = options.outdir;
  if not options.no_log:
    if options.log:
      LOG = options.log;
#    Pyxis.assign("LOG",options.log);
    elif options.default_log:
      LOG = os.path.join(OUTDIR,"default.log") if OUTDIR else "default.log";
  
  in_screen = os.environ.get("STY") and not options.x11;
  
  NO_X11 = options.no_x11 or in_screen;
  if NO_X11:
    os.environ.pop('DISPLAY',None);
  JOBS = options.jobs
  QUIET = options.quiet; 
  PERSIST = options.persist;
  if options.verbose is None:
    if options.quiet:
      VERBOSE = -1;
  else:
    VERBOSE = options.verbose;
      
  import Pyxis
  import Pyxis.Internals
  import Pyxis.Commands
  if options.no_log:
    verbose(-99,"running with --no-log: assignments to LOG will be disabled and all output will go to the console");
  if in_screen and not options.no_x11:
    verbose(-99,"screen session detected: auto-disabling X11 connections. Run with the -X option to reenable.")

  LOG_HEADER = cmdline = time.strftime("## %c:\n")+" ".join(sys.argv);  
  LOG_FLUSH = options.flush_log;
  LOG_DISABLE = options.no_log;

  # init configuration. This preloads pyxis-*.
  PYXIS_LOAD_CONFIG = True
  Pyxis.Internals.initconf();
  
  # make output directory
  if OUTDIR:
    makedir(OUTDIR,no_interpolate=True);
  file((OUTDIR or '.')+"/pyxis.log","a").write(cmdline+"\n");
  Pyxis.Internals.saveconf();
 
  # sort arguments into commands and MSs
  mslist = []
  commands = []
  
  # add other commands
  for arg in args:
    if not Pyxis.Internals._re_assign.match(arg) and re.match(".*\\.(MS|ms)/?$",arg):
      if arg.endswith("/"):
        arg = arg[:-1];
#      assign("MS",arg);
      mslist.append(arg);
    else:
      commands.append(arg);
      
  # MS list from command line overrides defaults
  if mslist:
    info("setting MS list to",*mslist);
    globals().pop("MS_List_Template",None);
    assign('MS_List',mslist);
    if len(mslist) == 1:
      info("setting MS=%s"%mslist[0]);
      assign('MS',mslist[0]);
    
  ts0 = time.time();
  
  retcode = 0;
  # run commands
  if not commands:
    info("no commands given");
  else:
    try:
      Pyxis.Internals.run(*commands);
      retcode = 0;
    except Exception:
      if sys.stdout is not sys.__stdout__:
        traceback.print_exc();
        error("Exception raised, aborting");
        Pyxis.Internals.flush_log();
      sys.stdout = sys.__stdout__;
      sys.stderr = sys.__stderr__;
      traceback.print_exc();
      error("Exception raised, aborting");
      retcode = 1;
    except SystemExit,exc:
      retcode = exc.code;
    except KeyboardInterrupt:
      if Pyxis.Commands._subprocess_id is None:
        error("aborted with Ctrl+C");
      retcode = 130;
 
  if Pyxis.Commands._subprocess_id is None:
    if not retcode:
      info("all commands have executed successfully");
    else:
      error("exiting with error code %d, check the logs for errors"%retcode);
  
    logobj,logfile = Pyxis.Internals.get_logfile();
    if logobj:
      Pyxis.Internals.set_logfile(None,quiet=True);
      info("last logfile was %s"%logfile);
    
    report_elapsed(ts0);
  
  sys.exit(retcode);
      
      