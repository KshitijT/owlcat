#!/usr/bin/python
# -*- coding: utf-8 -*-

#
#% $Id$ 
#
#
# Copyright (C) 2002-2011
# The MeqTree Foundation & 
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>,
# or write to the Free Software Foundation, Inc., 
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
import sys
import os.path
import re
import time
import subprocess
import imp
import traceback

# defer config until later
PYXIS_LOAD_CONFIG = False
# disable auto-import -- meant for interactive sessions only
PYXIS_AUTO_IMPORT_MODULES = False

if __name__ == "__main__":

  # setup some standard command-line option parsing
  #
  from optparse import OptionParser
  parser = OptionParser(usage="""%prog: [options] a=value command_x b=value c=value command_y ...""",
    description="Runs a sequence of reduction commands");
  parser.add_option("-v","--verbose",type="int",default=1,
                    help="verbosity level, default is %default");
  parser.add_option("--log",type="string",metavar="FILENAME",
                    help="log output to file");
  parser.add_option("-l",dest="default_log",action="store_true",
                    help="equivalent to --log pyxis.log");

  (options,args) = parser.parse_args();

  # set verbosity BEFORE we import Pyxis
  VERBOSE = options.verbose
  
  import Pyxis
  import PyxisImpl.Internals

  # init configuration. This preloads pyxis-*.
  PYXIS_LOAD_CONFIG = True
  PyxisImpl.Internals.initconf();
    
  # sort arguments into commands and MSs
  mslist = []
  commands = []
  
  # add log command as first in list
  if options.log:
    commands.append("LOG="+options.log);
  elif options.default_log:
    commands.append("LOG="+pyxis.log);
  
  # add other commands
  for arg in args:
    if not PyxisImpl.Internals._re_assign.match(arg) and re.match(".*\\.(MS|ms)$",arg):
      assign("MS",arg);
      mslist.append(arg);
    else:
      commands.append(arg);
      
  # MS list from command line overrides defaults
  if mslist:
    info("setting MS list with",mslist);
    globals().pop("MS_List_Template",None);
    globals()['MS_List'] = mslist;
    
  ts0 = time.time();
  
  retcode = 0;
  # run commands
  if not commands:
    info("no commands to execute");
  else:
    try:
      run(*commands);
      retcode = 0;
    except Exception:
      if sys.stdout is not sys.__stdout__:
        traceback.print_exc();
        error("Exception raised, aborting");
        PyxisImpl.Internals.flush_log();
      sys.stdout = sys.__stdout__;
      sys.stderr = sys.__stderr__;
      traceback.print_exc();
      error("Exception raised, aborting");
      retcode = 1;
 
  ts0 = time.time() - ts0;
  h = ts0//3600;
  m = (ts0-h*3600)//60;
  s = ts0%60;     
  info("Elapsed time is %dh%dm%.2fs"%(h,m,s));
  if retcode:
    sys.exit(retcode);
      
      